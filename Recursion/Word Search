class Solution {
    int[] di = {+1, 0, 0, -1};
    int[] dj = {0, -1, +1, 0};
    int m, n;

    public boolean solve(char[][] board, int i, int j, int idx, String word) {
        if (idx == word.length()) {
            return true;
        }
        if (i < 0 || j < 0 || i >= m || j >= n || board[i][j] == '$' || board[i][j] != word.charAt(idx)) {
            return false;
        }

        char temp = board[i][j];
        board[i][j] = '$'; // mark visited

        for (int ind = 0; ind < 4; ind++) {
            int ni = i + di[ind];
            int nj = j + dj[ind];
            if (solve(board, ni, nj, idx + 1, word)) {
                return true;
            }
        }

        board[i][j] = temp; 
        return false;
    }

    public boolean exist(char[][] board, String word) {
        m = board.length;
        n = board[0].length;

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == word.charAt(0) && solve(board, i, j, 0, word)) {
                    return true;
                }
            }
        }
        return false;
    }
}
