from typing import List

def combinationSum(k: int, n: int) -> List[List[int]]:
    def backtrack(start,path,target):
        if len(path)==k and target==0:
            res.append(path.copy())
            return
        if len(path)>k and target<0:
            return
        for i in range(start,10):
            path.append(i)
            backtrack(i+1,path,target-i)
            path.pop()
    res=[]
    backtrack(1,[],n)
    return res
    pass
