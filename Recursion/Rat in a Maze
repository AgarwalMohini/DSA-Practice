import java.util.*;

public class Solution {

    public static void solve(int i, int j, int[][] maze, int n, List<String> ans, String path, int[][] vis,
                             int[] dx, int[] dy, char[] dir) {
        if (i == n - 1 && j == n - 1) {
            ans.add(path);
            return;
        }

        for (int idx = 0; idx < 4; idx++) {
            int ni = i + dx[idx];
            int nj = j + dy[idx];

            if (ni >= 0 && nj >= 0 && ni < n && nj < n &&
                maze[ni][nj] == 1 && vis[ni][nj] == 0) {
                vis[i][j] = 1;
                solve(ni, nj, maze, n, ans, path + dir[idx], vis, dx, dy, dir);
                vis[i][j] = 0;
            }
        }
    }
    public static ArrayList<String> findSum(int[][] maze, int n) {
        ArrayList<String> ans = new ArrayList<>();
        if (maze[0][0] == 0 || maze[n - 1][n - 1] == 0) {
            return ans;
        }

        int[][] vis = new int[n][n];
        int[] dx = {+1, 0, 0, -1};
        int[] dy = {0, -1, +1, 0};
        char[] dir = {'D', 'L', 'R', 'U'};

        solve(0, 0, maze, n, ans, "", vis, dx, dy, dir);
        Collections.sort(ans);
        return ans;
    }
}
