class Solution:
    def dfs(self,row,col,vis,board,drow,dcol):
        vis[row][col]=1
        m=len(board)
        n=len(board[0])
        for i in range(4):
            nrow=row+drow[i]
            ncol=col+dcol[i]
            if 0 <= nrow < m and 0 <= ncol < n and not vis[nrow][ncol] and board[nrow][ncol]=='O':
                self.dfs(nrow,ncol,vis,board,drow,dcol)

    def solve(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        m=len(board)
        n=len(board[0])
        drow=[-1,0,+1,0]
        dcol=[0,+1,0,-1]
        vis=[[0 for _ in range(n)] for _ in range(m)]
        for j in range(n):
            if not vis[0][j] and board[0][j]=='O':
                self.dfs(0,j,vis,board,drow,dcol)
            if not vis[m-1][j] and board[m-1][j]=='O':
                self.dfs(m-1,j,vis,board,drow,dcol)
        for i in range(m):
            if not vis[i][0] and board[i][0]=='O':
                self.dfs(i,0,vis,board,drow,dcol)
            if not vis[i][n-1] and board[i][n-1]=='O':
                self.dfs(i,n-1,vis,board,drow,dcol)
        for i in range(m):
            for j in range(n):
                if not vis[i][j] and board[i][j]=='O':
                    board[i][j]='X'
        return board


        
